[{"content":"","date":"2025-03-22T23:24:19+08:00","permalink":"https://ice-bear259.github.io/p/newnewnew/","title":"Newnewnew"},{"content":"Flask是一个使用Python编写的轻量级Web应用框架。\n一、基本信息 中文名：Flask 外文名：Flask（也被称作“microframework”） 特点：使用简单的核心 授权：BSD授权 核心语言：Python 主要依赖：Werkzeug（路由、调试和Web服务器网关接口（WebServerGatewayInterface，WSGI）子系统）和Jinja2（模板系统） 二、主要特点 轻量级与灵活性：Flask是一个轻量级的可定制框架，使用Python语言编写，较其他同类型框架更为灵活、轻便、安全且容易上手。 可定制性：Flask有很强的定制性，用户可以根据自己的需求来添加相应的功能，在保持核心功能简单的同时实现功能的丰富与扩展。其强大的插件库可以让用户实现个性化的网站定制，开发出功能强大的网站。 易于上手：Flask的文档清晰简洁，易于学习和使用，同时它有一个庞大的社区，提供了丰富的资源和支持。 扩展性：Flask提供了丰富的扩展库（也称为扩展组件），开发者可以根据需求选择合适的扩展来扩展功能。这些功能都是以扩展组件的方式实现，然后再与Flask框架集成。 三、核心组件 Werkzeug：一个WSGI工具库，功能比较完善。它支持URL路由请求集成，可以响应多个用户的访问请求；支持Cookie和会话管理，建立长久连接关系，并提高用户访问速度；支持交互式Javascript调试，提高用户体验；还可以处理HTTP基本事务，快速响应客户端的访问请求。 Jinja2：一个模板引擎，用于渲染动态内容。它支持自动HTML转义功能，能够很好控制外部黑客的脚本攻击。系统运行速度很快，页面加载过程会将源码进行编译形成Python字节码，从而实现模板的高效运行。模板继承机制可以对模板内容进行修改和维护，为不同需求的用户提供相应的模板。 四、基本用法 创建Flask应用：首先需要导入Flask类，并创建一个其实例，第一个参数是应用模块或者包的名称。\n1 2 3 4 5 6 7 8 9 10 from flask import Flask app = Flask(__name__) # 主 # 要 # 代 # 码 # 内 # 容 if __name__ == \u0026#39;__main__\u0026#39;: app.run() 定义路由：使用@app.route()装饰器来定义路由，将请求的URL映射到相应的视图函数，从而实现不同URL对应不同的处理逻辑。\n编写视图函数：视图函数是与路由相关联的函数，用于处理URL请求并返回响应。\n1 2 3 4 5 6 7 8 9 10 11 12 13 @app.route(\u0026#39;/\u0026#39;) def hello_world(): return \u0026#39;\u0026#39; # 通过访问路径，获取用户的字符串参数 @app.route(\u0026#39;/index/\u0026lt;name\u0026gt;\u0026#39;): def hello(name): return \u0026#34;hi%s\u0026#34;%name # 通过访问路径，获取用户的整型参数(还有float类型) @app.route(\u0026#39;/index/\u0026lt;int:id\u0026gt;\u0026#39;): def hello1(id): return \u0026#34;hi,%d号会员你好\u0026#34;%id 使用模板引擎：Flask框架集成了Jinja2作为其默认的模板引擎，用于渲染动态内容。可以使用render_template()函数将动态数据传递给模板，并生成最终的HTML响应。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 from flask import render_template import datetime\t# 导入时间包 # 返回给用户渲染后的网页文件 @app.route(\u0026#39;/\u0026#39;) def index1(): return render_template(\u0026#39;index.html\u0026#39;) # 向页面传递一个变量 @app.route(\u0026#39;/\u0026#39;): def index2(): time = datetime.date.today()\t# 普通变量 name = [\u0026#39;小张\u0026#39;, \u0026#39;小王\u0026#39;, \u0026#39;小陈\u0026#39;] # 列表变量 task = {\u0026#39;任务\u0026#39;: \u0026#39;打扫卫生\u0026#39;, \u0026#39;时间\u0026#39;: \u0026#39;3小时\u0026#39;} # 字典变量 return render_template(\u0026#39;index.html\u0026#39;, var=time, list=name, task=task) # 表单提交 @app.route(\u0026#39;/test/register\u0026#39;) def register(): return render_template(\u0026#39;test/register.html\u0026#39;) 处理请求：Flask框架还支持通过request对象来获取请求参数、请求头、请求方法等信息，从而实现更复杂的请求处理。\n1 2 3 4 5 6 7 from flask import request # 接收表单提交的路由，需要指定methods为POST，否则默认为GET @app.route(\u0026#39;/result\u0026#39;, methods=[\u0026#34;POST\u0026#34;, \u0026#34;GET\u0026#34;]) def result(): if request.method == \u0026#34;POST\u0026#34;: result = request.form return render_template(\u0026#39;test/result.html\u0026#39;, result=result) ","date":"2024-10-25T00:00:00Z","image":"https://ice-bear259.github.io/p/flask%E6%A1%86%E6%9E%B6/bigbang_hu_96f8d756a935d21d.jpg","permalink":"https://ice-bear259.github.io/p/flask%E6%A1%86%E6%9E%B6/","title":"Flask框架"},{"content":"Python基础笔记 1. global关键字 使用global关键字可以在函数内部声明变量为全局变量。\n2. 列表的下标索引 正向索引：第一个元素从0开始。 反向索引：最后一个元素下标为-1，向前依次-1。 3. 列表的常用操作方法 查询下标：列表.index(元素)，若该元素不存在则会报错。 插入元素：列表.insert(下标, 元素)。 追加元素：列表.append(元素)，该元素追加到列表尾部。 追加一批元素：列表.extend(其他列表)，将该列表追加到原本列表的尾部。 删除元素： del 列表[下标] 列表.pop(下标)，该方法能返回删除的元素。 删除某元素在列表中的第一项：列表.remove(元素)。 清空列表：列表.clear()。 统计某元素在列表中的数量：列表.count(元素)。 统计列表内有多少个元素：len(列表)。 4. 元组的定义和操作 元组只读，不可修改（若在元组里嵌套了列表，列表是可以修改的）。\n用括号定义：如t1 = (1, \u0026quot;hello\u0026quot;, True)。 定义单个元素的元组要加个逗号，否则是字符串类型或其他类型。 元组下标索引与列表一致。 查询下标：元组.index(元素)，若该元素不存在则会报错。 统计某元素在元组中的数量：元组.count(元素)。 统计元组内有多少个元素：len(元组)。 5. 字符串的定义和操作 统计字符串的长度：len(字符串)。 6. 序列的切片 7. 集合的定义和操作 定义一个空集合：集合 = set()。 不可重复，自动去重；无序，不支持下标索引。 添加元素：集合.add(元素)。 移除元素：集合.remove(元素)。 随取出一个元素：集合.pop()，取出该元素后，集合将不再包含被取出的元素。 清空集合：集合.clear()。 统计集合元素数量：len(集合)。 集合不支持下标索引，不能用while循环，可以用for循环。 8. 字典的定义和操作 不能使用下标索引，使用key来取得对应的value。 删除元素：字典.pop(key)，能返回删除的元素的值。 清空元素：字典.clear()。 获取全部的key：字典.keys()，就能通过获取的key遍历字典。 统计字典元素个数：len(字典)。 9. 五种数据容器特点对比 类型转换： 容器转列表：list(容器) 容器转元组：tuple(容器) 容器转字符串：str(容器) 容器转集合：set(容器) 容器通用排序功能：sorted(容器, reverse=True)（reverse默认为False可以不写）。 10. 函数的多种参数使用形式 位置参数：形参与实参位置一一对应。 关键字参数：函数调用时通过\u0026quot;键=值\u0026quot;形式传递参数。 缺省参数：定义函数时给形参设默认值，且有默认值的形参要放在所有形参的最后。 不定长参数： 11. 函数作为参数传递 12. lambda匿名函数 无名称的匿名函数只可以临时使用一次。 函数体只能写一行代码，无法写多行代码。 13. 文件的读取操作 打开文件： 读取文件： read()：读取整个文件内容。 readlines()：按行读取文件内容，返回一个列表。 readline()：逐行读取文件内容。 使用for循环读取文件每一行。 关闭文件：.close()。 with open语法：读取等操作完成后自动关闭文件。 总结： 14. 文件的写出操作 w操作：文件不存在会创建文件，文件存在会清空文件内容，写入我们想写的内容。 write()写入内容。 flush()刷新内容到硬盘中。 close()方法自带flush()的功能。 a操作：文件不存在会创建文件，文件存在会在最后写入我们想写的内容。 15. 异常捕获 1 2 3 4 5 6 7 8 9 10 11 try: # 可能出现异常的代码块 except Exception as e: # 出现异常时执行的代码块 print(f\u0026#34;捕获到异常: {e}\u0026#34;) else: # 没出现异常时执行的代码块 print(\u0026#34;代码执行成功，没有异常\u0026#34;) finally: # 无论是否出现异常，都会执行的代码块 print(\u0026#34;执行结束，进行资源清理等操作\u0026#34;) 16. 自定义模块并导入 __main__变量的功能： 只有当程序是直接执行的时候，才会进入__main__下的代码块。 如果程序是被其他模块导入的，则不会执行__main__下的代码块。 模块导入的覆盖规则： 如果不同模块有同名函数，并且它们都被导入到同一个脚本中，那么后者将会覆盖前者。 __all__变量的作用： 可以控制在使用from module import *时，哪些功能时可以被导入的。 17. JSON数据格式的转换 JSON格式简介： JSON（JavaScript Object Notation）是一种轻量级的数据交换格式。 它可以是一个字典，也可以是一个内部元素都是字典的列表。 Python数据转换为JSON数据： 1 2 3 4 import json data = {\u0026#34;key\u0026#34;: \u0026#34;value\u0026#34;, \u0026#34;number\u0026#34;: 123} json_data = json.dumps(data, ensure_ascii=False) # 如果有中文，可以带上 ensure_ascii=False 参数来确保中文正常转换 print(json_data) JSON数据转换为Python数据： 1 2 3 json_data = \u0026#39;{\u0026#34;key\u0026#34;: \u0026#34;value\u0026#34;, \u0026#34;number\u0026#34;: 123}\u0026#39; python_data = json.loads(json_data) print(python_data) ","date":"2024-10-23T00:00:00Z","image":"https://ice-bear259.github.io/p/python%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/aespa_hu_a3e7e3ef54d87267.jpg","permalink":"https://ice-bear259.github.io/p/python%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80/","title":"Python入门基础"}]